/* tslint:disable */
/* eslint-disable */
/**
 * Financial API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const ExpenseCategoryDto = {
    Drinks: 'Drinks',
    Coffee: 'Coffee',
    Food: 'Food',
    Groceries: 'Groceries',
    Travel: 'Travel',
    Bills: 'Bills',
    Credit: 'Credit',
    Shopping: 'Shopping'
} as const;

export type ExpenseCategoryDto = typeof ExpenseCategoryDto[keyof typeof ExpenseCategoryDto];


/**
 * 
 * @export
 * @interface ExpenseDto
 */
export interface ExpenseDto {
    /**
     * 
     * @type {number}
     * @memberof ExpenseDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExpenseDto
     */
    'ownerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExpenseDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpenseDto
     */
    'comment'?: string;
    /**
     * 
     * @type {ExpenseCategoryDto}
     * @memberof ExpenseDto
     */
    'category'?: ExpenseCategoryDto;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const GoalsCategoryDto = {
    Vehicle: 'Vehicle',
    RealEstate: 'Real estate',
    Travel: 'Travel',
    Education: 'Education',
    Retirement: 'Retirement',
    HomeImprovement: 'Home Improvement',
    TechnologyAndGadgets: 'Technology and Gadgets',
    Charity: 'Charity',
    HobbiesAndInterests: 'Hobbies and Interests'
} as const;

export type GoalsCategoryDto = typeof GoalsCategoryDto[keyof typeof GoalsCategoryDto];


/**
 * 
 * @export
 * @interface GoalsDto
 */
export interface GoalsDto {
    /**
     * 
     * @type {number}
     * @memberof GoalsDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GoalsDto
     */
    'ownerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof GoalsDto
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalsDto
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof GoalsDto
     */
    'date'?: string;
    /**
     * 
     * @type {GoalsCategoryDto}
     * @memberof GoalsDto
     */
    'category'?: GoalsCategoryDto;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const IncomeCategoryDto = {
    Salary: 'Salary',
    Rent: 'Rent'
} as const;

export type IncomeCategoryDto = typeof IncomeCategoryDto[keyof typeof IncomeCategoryDto];


/**
 * 
 * @export
 * @interface IncomeDto
 */
export interface IncomeDto {
    /**
     * 
     * @type {number}
     * @memberof IncomeDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof IncomeDto
     */
    'ownerId'?: number;
    /**
     * 
     * @type {number}
     * @memberof IncomeDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'place'?: string;
    /**
     * 
     * @type {string}
     * @memberof IncomeDto
     */
    'comment'?: string;
    /**
     * 
     * @type {IncomeCategoryDto}
     * @memberof IncomeDto
     */
    'category'?: IncomeCategoryDto;
}


/**
 * 
 * @export
 * @interface ProjectionDto
 */
export interface ProjectionDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectionDto
     */
    'incomes'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProjectionDto
     */
    'expenses'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SavingDto
 */
export interface SavingDto {
    /**
     * 
     * @type {number}
     * @memberof SavingDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SavingDto
     */
    'ownerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SavingDto
     */
    'amount'?: string;
    /**
     * 
     * @type {string}
     * @memberof SavingDto
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof SavingDto
     */
    'date'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all expense records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseIdDelete', 'id', id)
            const localVarPath = `/expense/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseIdGet', 'id', id)
            const localVarPath = `/expense/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an expense record by ID
         * @param {number} id 
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdPut: async (id: number, expenseDto: ExpenseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseIdPut', 'id', id)
            // verify required parameter 'expenseDto' is not null or undefined
            assertParamExists('expenseIdPut', 'expenseDto', expenseDto)
            const localVarPath = `/expense/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all expense records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseMonthDateGet: async (date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('expenseMonthDateGet', 'date', date)
            const localVarPath = `/expense/month/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new expense record
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expensePost: async (expenseDto: ExpenseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseDto' is not null or undefined
            assertParamExists('expensePost', 'expenseDto', expenseDto)
            const localVarPath = `/expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all goal records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsIdDelete', 'id', id)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsIdGet', 'id', id)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an goal record by ID
         * @param {number} id 
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdPut: async (id: number, goalsDto: GoalsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('goalsIdPut', 'id', id)
            // verify required parameter 'goalsDto' is not null or undefined
            assertParamExists('goalsIdPut', 'goalsDto', goalsDto)
            const localVarPath = `/goals/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(goalsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new goal record
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsPost: async (goalsDto: GoalsDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalsDto' is not null or undefined
            assertParamExists('goalsPost', 'goalsDto', goalsDto)
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(goalsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all income records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('incomeIdDelete', 'id', id)
            const localVarPath = `/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('incomeIdGet', 'id', id)
            const localVarPath = `/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an income record by ID
         * @param {number} id 
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdPut: async (id: number, incomeDto: IncomeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('incomeIdPut', 'id', id)
            // verify required parameter 'incomeDto' is not null or undefined
            assertParamExists('incomeIdPut', 'incomeDto', incomeDto)
            const localVarPath = `/income/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all income records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeMonthDateGet: async (date: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('incomeMonthDateGet', 'date', date)
            const localVarPath = `/income/month/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new income record
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomePost: async (incomeDto: IncomeDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'incomeDto' is not null or undefined
            assertParamExists('incomePost', 'incomeDto', incomeDto)
            const localVarPath = `/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(incomeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all projection data
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectionYearGet: async (year: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('projectionYearGet', 'year', year)
            const localVarPath = `/projection/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all expense records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an expense record by ID
         * @param {number} id 
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseIdPut(id: number, expenseDto: ExpenseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseIdPut(id, expenseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all expense records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseMonthDateGet(date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseMonthDateGet(date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new expense record
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expensePost(expenseDto: ExpenseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expensePost(expenseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all goal records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoalsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an goal record by ID
         * @param {number} id 
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsIdPut(id: number, goalsDto: GoalsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoalsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsIdPut(id, goalsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new goal record
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async goalsPost(goalsDto: GoalsDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GoalsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.goalsPost(goalsDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all income records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IncomeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IncomeDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an income record by ID
         * @param {number} id 
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeIdPut(id: number, incomeDto: IncomeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IncomeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeIdPut(id, incomeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all income records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomeMonthDateGet(date: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IncomeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomeMonthDateGet(date, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new income record
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async incomePost(incomeDto: IncomeDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IncomeDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.incomePost(incomeDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all projection data
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectionYearGet(year: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectionYearGet(year, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all expense records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseGet(options?: any): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.expenseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.expenseIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an expense record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdGet(id: number, options?: any): AxiosPromise<ExpenseDto> {
            return localVarFp.expenseIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an expense record by ID
         * @param {number} id 
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseIdPut(id: number, expenseDto: ExpenseDto, options?: any): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.expenseIdPut(id, expenseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all expense records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseMonthDateGet(date: string, options?: any): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.expenseMonthDateGet(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new expense record
         * @param {ExpenseDto} expenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expensePost(expenseDto: ExpenseDto, options?: any): AxiosPromise<Array<ExpenseDto>> {
            return localVarFp.expensePost(expenseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all goal records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsGet(options?: any): AxiosPromise<Array<GoalsDto>> {
            return localVarFp.goalsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.goalsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a goal record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdGet(id: number, options?: any): AxiosPromise<GoalsDto> {
            return localVarFp.goalsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an goal record by ID
         * @param {number} id 
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsIdPut(id: number, goalsDto: GoalsDto, options?: any): AxiosPromise<Array<GoalsDto>> {
            return localVarFp.goalsIdPut(id, goalsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new goal record
         * @param {GoalsDto} goalsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        goalsPost(goalsDto: GoalsDto, options?: any): AxiosPromise<Array<GoalsDto>> {
            return localVarFp.goalsPost(goalsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all income records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeGet(options?: any): AxiosPromise<Array<IncomeDto>> {
            return localVarFp.incomeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.incomeIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an income record by ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdGet(id: number, options?: any): AxiosPromise<IncomeDto> {
            return localVarFp.incomeIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an income record by ID
         * @param {number} id 
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeIdPut(id: number, incomeDto: IncomeDto, options?: any): AxiosPromise<Array<IncomeDto>> {
            return localVarFp.incomeIdPut(id, incomeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all income records for specific month and year
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomeMonthDateGet(date: string, options?: any): AxiosPromise<Array<IncomeDto>> {
            return localVarFp.incomeMonthDateGet(date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new income record
         * @param {IncomeDto} incomeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        incomePost(incomeDto: IncomeDto, options?: any): AxiosPromise<Array<IncomeDto>> {
            return localVarFp.incomePost(incomeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all projection data
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectionYearGet(year: number, options?: any): AxiosPromise<ProjectionDto> {
            return localVarFp.projectionYearGet(year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Get all expense records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseGet(options?: AxiosRequestConfig): AxiosPromise<Array<ExpenseDto>>;

    /**
     * 
     * @summary Delete an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<ExpenseDto>;

    /**
     * 
     * @summary Update an expense record by ID
     * @param {number} id 
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdPut(id: number, expenseDto: ExpenseDto, options?: AxiosRequestConfig): AxiosPromise<Array<ExpenseDto>>;

    /**
     * 
     * @summary Get all expense records for specific month and year
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseMonthDateGet(date: string, options?: AxiosRequestConfig): AxiosPromise<Array<ExpenseDto>>;

    /**
     * 
     * @summary Create a new expense record
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expensePost(expenseDto: ExpenseDto, options?: AxiosRequestConfig): AxiosPromise<Array<ExpenseDto>>;

    /**
     * 
     * @summary Get all goal records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsGet(options?: AxiosRequestConfig): AxiosPromise<Array<GoalsDto>>;

    /**
     * 
     * @summary Delete an goal record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsIdDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get a goal record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<GoalsDto>;

    /**
     * 
     * @summary Update an goal record by ID
     * @param {number} id 
     * @param {GoalsDto} goalsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsIdPut(id: number, goalsDto: GoalsDto, options?: AxiosRequestConfig): AxiosPromise<Array<GoalsDto>>;

    /**
     * 
     * @summary Create a new goal record
     * @param {GoalsDto} goalsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    goalsPost(goalsDto: GoalsDto, options?: AxiosRequestConfig): AxiosPromise<Array<GoalsDto>>;

    /**
     * 
     * @summary Get all income records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeGet(options?: AxiosRequestConfig): AxiosPromise<Array<IncomeDto>>;

    /**
     * 
     * @summary Delete an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdDelete(id: number, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdGet(id: number, options?: AxiosRequestConfig): AxiosPromise<IncomeDto>;

    /**
     * 
     * @summary Update an income record by ID
     * @param {number} id 
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdPut(id: number, incomeDto: IncomeDto, options?: AxiosRequestConfig): AxiosPromise<Array<IncomeDto>>;

    /**
     * 
     * @summary Get all income records for specific month and year
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeMonthDateGet(date: string, options?: AxiosRequestConfig): AxiosPromise<Array<IncomeDto>>;

    /**
     * 
     * @summary Create a new income record
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomePost(incomeDto: IncomeDto, options?: AxiosRequestConfig): AxiosPromise<Array<IncomeDto>>;

    /**
     * 
     * @summary Get all projection data
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    projectionYearGet(year: number, options?: AxiosRequestConfig): AxiosPromise<ProjectionDto>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Get all expense records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expenseGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expenseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expenseIdDelete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expenseIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expenseIdGet(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expenseIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an expense record by ID
     * @param {number} id 
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expenseIdPut(id: number, expenseDto: ExpenseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expenseIdPut(id, expenseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all expense records for specific month and year
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expenseMonthDateGet(date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expenseMonthDateGet(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new expense record
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public expensePost(expenseDto: ExpenseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).expensePost(expenseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all goal records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an goal record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsIdDelete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a goal record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsIdGet(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an goal record by ID
     * @param {number} id 
     * @param {GoalsDto} goalsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsIdPut(id: number, goalsDto: GoalsDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsIdPut(id, goalsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new goal record
     * @param {GoalsDto} goalsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public goalsPost(goalsDto: GoalsDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).goalsPost(goalsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all income records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomeGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomeIdDelete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomeIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomeIdGet(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an income record by ID
     * @param {number} id 
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomeIdPut(id: number, incomeDto: IncomeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomeIdPut(id, incomeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all income records for specific month and year
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomeMonthDateGet(date: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomeMonthDateGet(date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new income record
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public incomePost(incomeDto: IncomeDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).incomePost(incomeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all projection data
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectionYearGet(year: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).projectionYearGet(year, options).then((request) => request(this.axios, this.basePath));
    }
}



