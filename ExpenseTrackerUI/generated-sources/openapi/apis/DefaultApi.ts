/* tslint:disable */
/* eslint-disable */
/**
 * Financial API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExpenseDto,
  IncomeDto,
} from '../models/index';
import {
    ExpenseDtoFromJSON,
    ExpenseDtoToJSON,
    IncomeDtoFromJSON,
    IncomeDtoToJSON,
} from '../models/index';

export interface ExpenseIdDeleteRequest {
    id: number;
}

export interface ExpenseIdGetRequest {
    id: number;
}

export interface ExpenseIdPutRequest {
    id: number;
    expenseDto: ExpenseDto;
}

export interface ExpensePostRequest {
    expenseDto: ExpenseDto;
}

export interface IncomeIdDeleteRequest {
    id: number;
}

export interface IncomeIdGetRequest {
    id: number;
}

export interface IncomeIdPutRequest {
    id: number;
    incomeDto: IncomeDto;
}

export interface IncomePostRequest {
    incomeDto: IncomeDto;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Get all expense records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseDto>>>;

    /**
     * Get all expense records
     */
    expenseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseDto>>;

    /**
     * 
     * @summary Delete an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdDeleteRaw(requestParameters: ExpenseIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an expense record by ID
     */
    expenseIdDelete(requestParameters: ExpenseIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an expense record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdGetRaw(requestParameters: ExpenseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     * Get an expense record by ID
     */
    expenseIdGet(requestParameters: ExpenseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @summary Update an expense record by ID
     * @param {number} id 
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expenseIdPutRaw(requestParameters: ExpenseIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     * Update an expense record by ID
     */
    expenseIdPut(requestParameters: ExpenseIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @summary Create a new expense record
     * @param {ExpenseDto} expenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    expensePostRaw(requestParameters: ExpensePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     * Create a new expense record
     */
    expensePost(requestParameters: ExpensePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @summary Get all income records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncomeDto>>>;

    /**
     * Get all income records
     */
    incomeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncomeDto>>;

    /**
     * 
     * @summary Delete an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdDeleteRaw(requestParameters: IncomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an income record by ID
     */
    incomeIdDelete(requestParameters: IncomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get an income record by ID
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdGetRaw(requestParameters: IncomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>>;

    /**
     * Get an income record by ID
     */
    incomeIdGet(requestParameters: IncomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto>;

    /**
     * 
     * @summary Update an income record by ID
     * @param {number} id 
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomeIdPutRaw(requestParameters: IncomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>>;

    /**
     * Update an income record by ID
     */
    incomeIdPut(requestParameters: IncomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto>;

    /**
     * 
     * @summary Create a new income record
     * @param {IncomeDto} incomeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    incomePostRaw(requestParameters: IncomePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>>;

    /**
     * Create a new income record
     */
    incomePost(requestParameters: IncomePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Get all expense records
     */
    async expenseGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExpenseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/expense`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExpenseDtoFromJSON));
    }

    /**
     * Get all expense records
     */
    async expenseGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExpenseDto>> {
        const response = await this.expenseGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete an expense record by ID
     */
    async expenseIdDeleteRaw(requestParameters: ExpenseIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expenseIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/expense/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an expense record by ID
     */
    async expenseIdDelete(requestParameters: ExpenseIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.expenseIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an expense record by ID
     */
    async expenseIdGetRaw(requestParameters: ExpenseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expenseIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/expense/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     * Get an expense record by ID
     */
    async expenseIdGet(requestParameters: ExpenseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto> {
        const response = await this.expenseIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an expense record by ID
     */
    async expenseIdPutRaw(requestParameters: ExpenseIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling expenseIdPut.');
        }

        if (requestParameters.expenseDto === null || requestParameters.expenseDto === undefined) {
            throw new runtime.RequiredError('expenseDto','Required parameter requestParameters.expenseDto was null or undefined when calling expenseIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/expense/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseDtoToJSON(requestParameters.expenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     * Update an expense record by ID
     */
    async expenseIdPut(requestParameters: ExpenseIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto> {
        const response = await this.expenseIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new expense record
     */
    async expensePostRaw(requestParameters: ExpensePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.expenseDto === null || requestParameters.expenseDto === undefined) {
            throw new runtime.RequiredError('expenseDto','Required parameter requestParameters.expenseDto was null or undefined when calling expensePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/expense`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseDtoToJSON(requestParameters.expenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new expense record
     */
    async expensePost(requestParameters: ExpensePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseDto> {
        const response = await this.expensePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all income records
     */
    async incomeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IncomeDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/income`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IncomeDtoFromJSON));
    }

    /**
     * Get all income records
     */
    async incomeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IncomeDto>> {
        const response = await this.incomeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete an income record by ID
     */
    async incomeIdDeleteRaw(requestParameters: IncomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling incomeIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/income/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an income record by ID
     */
    async incomeIdDelete(requestParameters: IncomeIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.incomeIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get an income record by ID
     */
    async incomeIdGetRaw(requestParameters: IncomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling incomeIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/income/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeDtoFromJSON(jsonValue));
    }

    /**
     * Get an income record by ID
     */
    async incomeIdGet(requestParameters: IncomeIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto> {
        const response = await this.incomeIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an income record by ID
     */
    async incomeIdPutRaw(requestParameters: IncomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling incomeIdPut.');
        }

        if (requestParameters.incomeDto === null || requestParameters.incomeDto === undefined) {
            throw new runtime.RequiredError('incomeDto','Required parameter requestParameters.incomeDto was null or undefined when calling incomeIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/income/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeDtoToJSON(requestParameters.incomeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeDtoFromJSON(jsonValue));
    }

    /**
     * Update an income record by ID
     */
    async incomeIdPut(requestParameters: IncomeIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto> {
        const response = await this.incomeIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new income record
     */
    async incomePostRaw(requestParameters: IncomePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IncomeDto>> {
        if (requestParameters.incomeDto === null || requestParameters.incomeDto === undefined) {
            throw new runtime.RequiredError('incomeDto','Required parameter requestParameters.incomeDto was null or undefined when calling incomePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/income`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IncomeDtoToJSON(requestParameters.incomeDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IncomeDtoFromJSON(jsonValue));
    }

    /**
     * Create a new income record
     */
    async incomePost(requestParameters: IncomePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IncomeDto> {
        const response = await this.incomePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
