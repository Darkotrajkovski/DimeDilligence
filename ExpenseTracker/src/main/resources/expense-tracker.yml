openapi: 3.0.3
info:
  title: Financial API
  version: 1.0.0
servers:
  - url: api/v1
paths:
  /authentication/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDto'
      responses:
        '201':
          description: Successfully created
  /authentication/authenticate:
    post:
      summary: Authenticate an user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequestDto'
      responses:
        '201':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponseDto'
  /income:
    get:
      summary: Get all income records
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeDto'
    post:
      summary: Create a new income record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeDto'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeDto'
  /income/month/{date}:
    get:
      summary: Get all income records for specific month and year
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeDto'
  /income/{id}:
    get:
      summary: Get an income record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeDto'
        '404':
          description: Income record not found
    put:
      summary: Update an income record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncomeDto'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IncomeDto'
        '404':
          description: Income record not found
    delete:
      summary: Delete an income record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted
  /expense:
    get:
      summary: Get all expense records
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseDto'
    post:
      summary: Create a new expense record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseDto'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseDto'
  /expense/month/{date}:
    get:
      summary: Get all expense records for specific month and year
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseDto'
  /expense/{id}:
    get:
      summary: Get an expense record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
        '404':
          description: Expense record not found
    put:
      summary: Update an expense record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpenseDto'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseDto'
        '404':
          description: Expense record not found
    delete:
      summary: Delete an expense record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted
  /projection/{year}:
    get:
      summary: Get all projection data
      parameters:
        - name: year
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectionDto'
  /goals:
    get:
      summary: Get all goal records
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoalsDto'
    post:
      summary: Create a new goal record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalsDto'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoalsDto'
  /goals/{id}:
    get:
      summary: Get a goal record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalsDto'
        '404':
          description: Expense record not found
    put:
      summary: Update an goal record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalsDto'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GoalsDto'
        '404':
          description: Expense record not found
    delete:
      summary: Delete an goal record by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Successfully deleted
components:
  schemas:
    RegisterRequestDto:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
    AuthenticationRequestDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticationResponseDto:
      type: object
      properties:
        token:
          type: string
        userId:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
    IncomeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        amount:
          type: number  # Represent as a string in OpenAPI to allow for BigDecimal
          format: bigdecimal
        currency:
          type: string
        date:
          type: string
          format: date
        description:
          type: string
        place:
          type: string
        comment:
          type: string
        category:
          $ref: '#/components/schemas/IncomeCategoryDto'
    ExpenseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        amount:
          type: number  # Represent as a string in OpenAPI to allow for BigDecimal
          format: bigdecimal
        currency:
          type: string
        date:
          type: string
          format: date
        description:
          type: string
        place:
          type: string
        comment:
          type: string
        category:
          $ref: '#/components/schemas/ExpenseCategoryDto'
    IncomeCategoryDto:
      type: string
      enum:
        - Salary
        - Rent
    ExpenseCategoryDto:
      type: string
      enum:
        - Drinks
        - Coffee
        - Food
        - Groceries
        - Travel
        - Bills
        - Credit
        - Shopping
    SavingDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        amount:
          type: string  # Represent as a string in OpenAPI to allow for BigDecimal
          format: decimal
        currency:
          type: string
        date:
          type: string
          format: date
    ProjectionDto:
      type: object
      properties:
        incomes:
          type: array
          items:
            type: string
            format: decimal
        expenses:
          type: array
          items:
            type: string
            format: decimal
    GoalsDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ownerId:
          type: integer
          format: int64
        amount:
          type: string
          format: decimal
        currency:
          type: string
        description:
          type: string
        date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/GoalsCategoryDto'
    GoalsCategoryDto:
      type: string
      enum:
        - Vehicle
        - RealEstate
        - Travel
        - Education
        - HomeImprovement
        - TechnologyAndGadgets
        - Charity
        - Hobbies

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
